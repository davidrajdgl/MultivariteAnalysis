data.frame('height' = sample(5, 150, 175),
'Weight' = sample(5, 50, 65),
'SBP'    = sample(5, 100, 135),
'DBP'    = sample(5, 110, 135))
data.frame('height' = sample(150, 175,5),
'Weight' = sample(50, 65, 5),
'SBP'    = sample(100, 135, 5),
'DBP'    = sample(110, 135,5))
data.frame('height' = sample(c(150, 175),5),
'Weight' = sample(c(50, 65), 5),
'SBP'    = sample(c(100, 135), 5),
'DBP'    = sample(c(110, 135),5))
data.frame('height' = sample(150:175,5),
'Weight' = sample(50:65, 5),
'SBP'    = sample(100:135, 5),
'DBP'    = sample(110:135,5))
data.frame('height' = sample(150:175,5),
'Weight' = sample(50:65, 5),
'SBP'    = sample(100:135, 5),
'DBP'    = sample(110:135,5))
library(knitr)
library(kableExtra)
install.packages("kableExtra")
library(knitr)
library(kableExtra)
dt <- mtcars[1:5, 1:6]
library(knitr)
library(kableExtra)
dt <- mtcars[1:5, 1:6]
dt
unlink('lecture2_cache', recursive = TRUE)
data.frame('height' = sample(150:175,5),
'Weight' = sample(50:65, 5),
'SBP'    = sample(100:135, 5),
'DBP'    = sample(110:135,5))
knitr::opts_chunk$set(echo = TRUE)
# library(lemon)
# knit_print.data.frame <- lemon_print
library(knitr)
library(kableExtra)
dt <- mtcars[1:5, 1:6]
dt %>%
kable() %>%
kable_styling()
knitr::opts_chunk$set(echo = TRUE)
# library(lemon)
# knit_print.data.frame <- lemon_print
library(knitr)
library(kableExtra)
options(full_width = F)
data.frame('height' = sample(150:175,5),
'Weight' = sample(50:65, 5),
'SBP'    = sample(100:135, 5),
'DBP'    = sample(110:135,5))
dt <- mtcars[1:5, 1:6]
dt %>%
kable() %>%
kable_styling(full_width = FALSE))
dt <- mtcars[1:5, 1:6]
dt %>%
kable() %>%
kable_styling(full_width = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# library(lemon)
# knit_print.data.frame <- lemon_print
library(knitr)
library(kableExtra)
options(kable_styling(full_width = FALSE))
knitr::opts_chunk$set(echo = TRUE)
# library(lemon)
# knit_print.data.frame <- lemon_print
library(knitr)
library(kableExtra)
kable(head(iris), format = "latex")
knitr::opts_chunk$set(echo = TRUE)
# library(lemon)
# knit_print.data.frame <- lemon_print
library(knitr)
library(kableExtra)
options(kable.kable_styling(fullwidth=F))
knitr::opts_chunk$set(echo = TRUE)
# library(lemon)
# knit_print.data.frame <- lemon_print
library(knitr)
library(kableExtra)
options(kable_styling(fullwidth=F))
knitr::opts_chunk$set(echo = TRUE)
# library(lemon)
# knit_print.data.frame <- lemon_print
library(knitr)
library(kableExtra)
options(kable_styling(.,fullwidth=F))
knitr::opts_chunk$set(echo = TRUE)
# library(lemon)
# knit_print.data.frame <- lemon_print
library(knitr)
library(kableExtra)
options(kable_styling.fullwidth=F)
dt <- mtcars[1:5, 1:6]
dt %>%
kable()
dt <- mtcars[1:5, 1:6]
dt
knitr::opts_chunk$set(echo = TRUE)
library(lemon)
knit_print.data.frame <- lemon_print
data.frame('Height' = sample(150:175,5),
'Weight' = sample(50:65, 5),
'SBP'    = sample(100:135, 5),
'DBP'    = sample(110:135,5))
library(kableExtra)
df = data.frame('Height' = sample(150:175,5),
'Weight' = sample(50:65, 5),
'SBP'    = sample(100:135, 5),
'DBP'    = sample(110:135,5))
df %>% kable() %>% kable_styling(full_width = F)
unlink('lecture2_cache', recursive = TRUE)
library(kableExtra)
df = data.frame('Height' = sample(150:175,5),
'Weight' = sample(50:65, 5),
'SBP'    = sample(100:135, 5),
'DBP'    = sample(110:135,5))
df %>% kable() %>% kable_styling(bootstrap_options = "striped",full_width = F)
library(kableExtra)
df = data.frame('Height' = sample(150:175,5),
'Weight' = sample(50:65, 5),
'SBP'    = sample(100:135, 5),
'DBP'    = sample(110:135,5))
df %>% kable(caption = \\label{tab:rand_vec}Sample Multivariate Data having 4 variables") %>% kable_styling(bootstrap_options = "striped",full_width = F)
library(kableExtra)
df = data.frame('Height' = sample(150:175,5),
'Weight' = sample(50:65, 5),
'SBP'    = sample(100:135, 5),
'DBP'    = sample(110:135,5))
df %>% kable(caption = "\\label{tab:rand_vec}Sample Multivariate Data having 4 variables") %>% kable_styling(bootstrap_options = "striped",full_width = F)
library(kableExtra)
df = data.frame('Height' = sample(150:175,5),
'Weight' = sample(50:65, 5),
'SBP'    = sample(100:135, 5),
'DBP'    = sample(110:135,5))
df %>% kable(caption = "Sample Multivariate Data having 4 variables") %>% kable_styling(bootstrap_options = "striped",full_width = F)
library(kableExtra)
df = data.frame('Height' = sample(150:175,5),
'Weight' = sample(50:65, 5),
'SBP'    = sample(100:135, 5),
'DBP'    = sample(110:135,5))
df %>% kable(caption = "\\label{tab:tab2}Sample Multivariate Data having 4 variables") %>% kable_styling(bootstrap_options = "striped",full_width = F)
library(kableExtra)
df = data.frame('Height' = sample(150:175,5),
'Weight' = sample(50:65, 5),
'SBP'    = sample(100:135, 5),
'DBP'    = sample(110:135,5))
df %>% kable(caption = "Sample Multivariate Data having 4 variables") %>% kable_styling(bootstrap_options = "striped",full_width = F)
library(readxl)
data= read_excel('crossSecData.xlsx')
head(data, n = 5) #Show only first 5 rows of the data
meanVec = colnames(data)
#Load the new data set as X
X  = 'Save the newCrossSec here'
#using the matrix approach find the mean vector. Note that you have generate a vector of all ones. Hint: vector of all 2's can be acheived by `rep(2, 100)`
one = 'Edit this place to generate vector of ones'
SampleMeanVec = 'Edit this place to place the sample mean vector'
library(lemon) #This is to show the table pretty in pdf
knit_print.data.frame <- lemon_print
library(readxl)
data= read_excel('crossSecData.xlsx')
head(data, n = 5) #Show only first 5 rows of the data
setwd("F:/MSC stat/Mulitvariate/MultivariteAnalysis-Github/ProblemSheets/Problemsheet2")
head(data)
head(data, n = 5)
tail(data, n = 5)
randVec = colnames(data)
randVec
head(data)
data[ , c(3, 4,5,6,7)]
newCrossSec = data[ , c(3, 4,5,6,7)]
head(newCrossSec, n = 10)
newCrossSec = data[ , c(3, 4,6,7)]
head(newCrossSec, n = 10)
#Load the new data set as X
X  =  newCrossSec
head(X)
#using the matrix approach find the mean vector. Note that you have to  generate a vector of all ones. Hint: vector of all 2's can be acheived by `rep(2, 100)`
one = rep(1, nrow(X))
#Load the new data set as X
X  =  newCrossSec
#using the matrix approach find the mean vector. Note that you have to  generate a vector of all ones. Hint: vector of all 2's can be acheived by `rep(2, 100)`
one = rep(1, nrow(X))
one
SampleMeanVec = 'Edit this place to place the sample mean vector'
A = matrix(1:12, ncol = 3)
A
A = matrix(1:9, ncol = 3)
A
2 * A
J = matrix(rep(1, 9), ncol =3 )
J
A * J
A %*% J
#using the matrix approach find the mean vector. Note that you have to  generate a vector of all ones. Hint: vector of all 2's can be acheived by `rep(2, 100)`
one = rep(1, nrow(X))
SampleMeanVec = 1 / nrow(X) * t(X) %*% one
SampleMeanVec
df1 = data.frame("J1" = 1:10, "J2" = 3:13, "J3" = 5:15)
df1
df1 = data.frame("J1" = 1:10, "J2" = 3:13, "J3" = 5:15)
df1 = data.frame("J1" = 1:10, "J2" = 3:12, "J3" = 5:15)
df1 = data.frame("J1" = 1:10, "J2" = 3:12, "J3" = 5:14)
df1
df1$means = df1$J1 + df1$J2 + df1$J3
df1
df1$means = 1/3 (df1$J1 + df1$J2 + df1$J3)
df1$means = 1/3 * (df1$J1 + df1$J2 + df1$J3)
df1
means = 1/3 * (df1$J1 + df1$J2 + df1$J3)
means
